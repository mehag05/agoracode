{"version":3,"file":"static/js/362.057889e0.chunk.js","mappings":"mOAOA,MAgDA,EAhDwBA,MACHC,EAAAA,EAAAA,MAAjB,MACOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAS,IAEnDG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAkB,IAAIC,gBAU5B,MARqBC,WACjB,MAAMC,QAAeC,IAAAA,mBACrBN,EAAiBK,GACjBR,GAAa,EAAM,EAGvBU,GAEO,KACHL,EAAgBM,OAAO,CAC1B,GACF,IAQH,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qEAAoEC,SAC9Ef,GACGa,EAAAA,EAAAA,KAAA,MAAAE,UAAIF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,OAEZH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACvBZ,GACGU,EAAAA,EAAAA,KAACI,EAAAA,EAAM,CAACC,QAbFV,UACtBP,GAAa,SC3BdO,iBACH,IAE4B,kDADDW,EAAAA,EAAAA,gBACVC,QAGTC,OAAOC,MAAM,gFACbD,OAAOE,SAASC,OAAO,uBAGvBH,OAAOE,SAASC,OAAO,wBAE/B,CAAE,MAAOC,IACiC,IAAlCA,EAAIC,0BAEJL,OAAOC,MAAMG,EAAIE,SAEjBN,OAAOC,MAAM,8BAErB,CACJ,CDQcM,GACN3B,GAAa,EAAM,EAUiCa,UAAU,+CAA8CC,SAAC,qCAI7FF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,+FAMvC,C","sources":["pages/VerifyEmailPage.tsx","auth/post_verification.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { consumeVerificationCode } from \"../auth/post_verification\"; // Adjust the import path as needed\nimport Session from \"supertokens-web-js/recipe/session\";\nimport { Button } from '../components/ui/button'; // Adjust the import path as needed\nimport Spinner from 'components/Spinner';\n\nconst VerifyEmailPage = () => {\n    const navigate = useNavigate();\n    const [isLoading, setIsLoading] = useState(true);\n    const [sessionExists, setSessionExists] = useState(false);\n\n    useEffect(() => {\n        const abortController = new AbortController(); // Create an AbortController instance\n\n        const checkSession = async () => {\n            const exists = await Session.doesSessionExist();\n            setSessionExists(exists);\n            setIsLoading(false);\n        };\n\n        checkSession();\n\n        return () => {\n            abortController.abort(); // Cleanup function to abort the request\n        };\n    }, []);\n\n    const handleVerifyEmail = async () => {\n        setIsLoading(true);\n        await consumeVerificationCode(); // Call the verification function\n        setIsLoading(false);\n    };\n\n    return (\n        <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\n            {isLoading ? (\n                <h1><Spinner/></h1>\n            ) : (\n                <div className=\"text-center\">\n                    {sessionExists ? (\n                        <Button onClick={handleVerifyEmail} className=\"bg-[--purple] text-white hover:bg-purple-700\">\n                            Click here to verify your email\n                        </Button>\n                    ) : (\n                        <p className=\"text-gray-700\">\n                            You need to log in with your email and password, then click the link we sent you again.\n                        </p>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VerifyEmailPage;\n","import { verifyEmail } from \"supertokens-web-js/recipe/emailverification\";\n\nexport async function consumeVerificationCode() {\n    try {\n        const response = await verifyEmail();\n        if (response.status === \"EMAIL_VERIFICATION_INVALID_TOKEN_ERROR\") {\n            // This can happen if the verification code is expired or invalid.\n            // You should ask the user to retry\n            window.alert(\"Oops! Seems like the verification link expired. Please hit okay to try again\")\n            window.location.assign(\"/auth/verify-email\") // back to the email sending screen.\n        } else {\n            // email was verified successfully.\n            window.location.assign(\"/verification-success\");\n        }\n    } catch (err: any) {\n        if (err.isSuperTokensGeneralError === true) {\n            // this may be a custom error message sent from the API by you.\n            window.alert(err.message);\n        } else {\n            window.alert(\"Oops! Something went wrong.\");\n        }\n    }\n}"],"names":["VerifyEmailPage","useNavigate","isLoading","setIsLoading","useState","sessionExists","setSessionExists","useEffect","abortController","AbortController","async","exists","Session","checkSession","abort","_jsx","className","children","Spinner","Button","onClick","verifyEmail","status","window","alert","location","assign","err","isSuperTokensGeneralError","message","consumeVerificationCode"],"sourceRoot":""}