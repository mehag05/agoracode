{"version":3,"file":"static/js/341.fbf6a705.chunk.js","mappings":"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","sources":["components/PaymentStatus.tsx","pages/ThankYouPage.tsx"],"sourcesContent":["'use client'\nimport axios from 'axios'\nimport React, { useState } from 'react'\n\ninterface PaymentStatusProps {\n  orderEmail: string\n  orderId: string\n  isPaid: boolean\n}\n\nconst PaymentStatus = ({\n  orderEmail,\n  orderId,\n  isPaid,\n}: PaymentStatusProps) => {\n  const [loading, setLoading] = useState(false)\n\n  const handleCheckout = async () => {\n    setLoading(true)\n    const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/create-checkout-session`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ orderId }),\n    })\n\n    const session = await response.data\n    if (session.url) {\n      window.location.href = session.url\n    }\n    setLoading(false)\n  }\n\n  return (\n    <div className='mt-16 grid grid-cols-2 gap-x-4 text-sm text-gray-600'>\n      <div>\n        <p className='font-medium text-gray-900'>\n          Shipping To\n        </p>\n        <p>{orderEmail}</p>\n      </div>\n\n      <div>\n        <p className='font-medium text-gray-900'>\n          Order Status\n        </p>\n        <p>\n          {isPaid\n            ? 'Payment successful'\n            : 'Pending payment'}\n        </p>\n        {!isPaid && (\n          <button\n            onClick={handleCheckout}\n            disabled={loading}\n            className='mt-2 bg-blue-500 text-white p-2 rounded'\n          >\n            {loading ? 'Processing...' : 'Pay Now'}\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default PaymentStatus","import React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom'; // Added Navigate import\nimport { IProduct } from '../schema/Product';\nimport { IUser } from '../schema/user';\nimport { PRODUCT_CATEGORIES } from '../config/config';\nimport { formatPrice } from '../lib/utils';\nimport PaymentStatus from '../components/PaymentStatus';\nimport { FetchUser } from '../utils/fetchUser';\nimport { IOrder } from '../schema/Order';\nimport axios from 'axios';\nimport { useCart } from '../hooks/useCart';\nimport Spinner from 'components/Spinner';\n\nconst ThankYouPage = () => {\n    const [orderId, setOrderId] = useState<string | null>(null);\n    const [order, setOrder] = useState<any>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    const { user, error: userError } = FetchUser(); // Destructure the returned object\n    const { clearCart } = useCart(); // Use the hook here\n\n    useEffect(() => {\n        // Clear the cart when the component mounts\n        clearCart();\n        console.log('Cleared cart');\n    }, [clearCart]); // Dependency array includes clearCart\n\n    useEffect(() => {\n        const fetchOrderId = async () => {\n            try {\n                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/get-order-id`);\n\n                if (!response.data) {\n                    throw new Error('Failed to fetch order ID');\n                }\n\n                const data = await response.data;\n                setOrderId(data.orderId);\n            } catch (err: any) {\n                setError(err.message);\n            }\n        };\n\n        fetchOrderId();\n    }, []);\n\n    const fetchOrderDetails = async (orderId: string) => {\n        try {\n            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}`);\n            if (!response.data) {\n                throw new Error('Failed to fetch order details');\n            }\n            const orderData = await response.data;\n            setOrder(orderData);\n        } catch (err: any) {\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        const abortController = new AbortController(); // Create an AbortController instance\n        if (orderId) {\n            fetchOrderDetails(orderId);\n        }\n\n        return () => {\n            abortController.abort(); // Cleanup function to abort the request\n        };\n    }, [orderId]);\n\n    if (loading) return <div><Spinner/></div>;\n    if (error) return <div>Error: {error}</div>;\n    if (!order) return <div>No order found.</div>;\n    if (userError) return <Navigate to=\"auth/signin\" />; // Use Navigate for redirection\n\n    const orderUserId = typeof order.user === 'string' ? order.user : order.user;\n\n    if (orderUserId !== user?.supertokens_id) {\n        return <Navigate to=\"auth/signin\" />; // Use Navigate for redirection\n    }\n\n    const products = order.products as unknown as IProduct[];\n\n    const orderTotal = products.reduce((total, product) => {\n        return total + product.price;\n    }, 0);\n\n    return (\n        <main className='relative lg:min-h-full'>\n            <div className='hidden lg:block h-80 overflow-hidden lg:absolute lg:h-full lg:w-1/2 lg:pr-4 xl:pr-12'>\n                <video\n                    autoPlay\n                    loop\n                    muted\n                    className='h-full w-full object-cover object-center'\n                >\n                    <source src='/order-confirmed.mp4' type='video/mp4' />\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n\n            <div>\n                <div className='mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:grid lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8 lg:py-32 xl:gap-x-24'>\n                    <div className='lg:col-start-2'>\n                        <p className='text-sm font-medium text-pink'>\n                            Order successful\n                        </p>\n                        <h1 className='mt-2 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl'>\n                            Thanks for ordering\n                        </h1>\n                        {order._isPaid ? (\n                            <p className='mt-2 text-base text-muted-foreground'>\n                                Your order was processed and the seller has been notified. We&apos;ve sent\n                                your receipt and order details to{' '}\n                                {typeof order.user !== 'string' ? (\n                                    <span className='font-medium text-gray-900'>\n                                        {user.email}\n                                    </span>\n                                ) : null}\n                                .\n                            </p>\n                        ) : (\n                            <p className='mt-2 text-base text-muted-foreground'>\n                                We appreciate your order, and we&apos;re\n                                currently processing it. So hang tight and\n                                we&apos;ll send you confirmation very soon!\n                            </p>\n                        )}\n\n                        <div className='mt-16 text-sm font-medium'>\n                            <div className='text-muted-foreground'>\n                                Order nr.\n                            </div>\n                            <div className='mt-2 text-gray-900'>\n                                {order._id as string} {/* Cast to string to resolve type error */}\n                            </div>\n\n                            <ul className='mt-6 divide-y divide-gray-200 border-t border-gray-200 text-sm font-medium text-muted-foreground'>\n                                {order.products.map(\n                                    (product: any) => {\n                                        const label = PRODUCT_CATEGORIES.find(\n                                            ({ value }) =>\n                                                value === product.category\n                                        )?.label;\n\n                                        const { image } = product.images[0];\n\n                                        return (\n                                            <li\n                                                key={product._id}\n                                                className='flex space-x-6 py-6'\n                                            >\n                                                <div className='relative h-24 w-24'>\n                                                    {typeof image !== 'string' &&\n                                                    'url' in image ? (\n                                                        <img\n                                                            src={image.url as string}\n                                                            alt={`${product.name} image`}\n                                                            className='flex-none rounded-md bg-gray-100 object-cover'\n                                                        />\n                                                    ) : null}\n                                                </div>\n\n                                                <div className='flex-auto flex flex-col justify-between'>\n                                                    <div className='space-y-1'>\n                                                        <h3 className='text-gray-900'>\n                                                            {product.name}\n                                                        </h3>\n\n                                                        <p className='my-1'>\n                                                            Category: {label}\n                                                        </p>\n                                                    </div>\n                                                </div>\n\n                                                <p className='flex-none font-medium text-gray-900'>\n                                                    {formatPrice(product.price)}\n                                                </p>\n                                            </li>\n                                        );\n                                    }\n                                )}\n                            </ul>\n\n                            <div className='space-y-6 border-t border-gray-200 pt-6 text-sm font-medium text-muted-foreground'>\n                                <div className='flex justify-between'>\n                                    <p>Subtotal</p>\n                                    <p className='text-gray-900'>\n                                        {formatPrice(orderTotal)}\n                                    </p>\n                                </div>\n\n                                <div className='flex justify-between'>\n                                    <p>Transaction Fee</p>\n                                    <p className='text-gray-900'>\n                                        {formatPrice(orderTotal * 0.03)}\n                                    </p>\n                                </div>\n\n                                <div className='flex items-center justify-between border-t border-gray-200 pt-6 text-gray-900'>\n                                    <p className='text-base'>Total</p>\n                                    <p className='text-base'>\n                                        {formatPrice(orderTotal + orderTotal * 0.03)}\n                                    </p>\n                                </div>\n                            </div>\n\n                            <PaymentStatus\n                                isPaid={order._isPaid}\n                                orderEmail={user?.email}\n                                orderId={order._id as string}\n                            />\n\n                            <div className='mt-16 border-t border-gray-200 py-6 text-right'>\n                                <a\n                                    href='/products'\n                                    className='text-sm font-medium text-pink hover:text-pink'>\n                                    Continue shopping &rarr;\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </main>\n    );\n};\n\nexport default ThankYouPage;"],"names":["_ref","orderEmail","orderId","isPaid","loading","setLoading","useState","_jsxs","className","children","_jsx","onClick","async","response","axios","post","method","headers","body","JSON","stringify","session","data","url","window","location","href","disabled","ThankYouPage","setOrderId","order","setOrder","error","setError","user","userError","FetchUser","clearCart","useCart","useEffect","console","log","get","Error","err","message","fetchOrderId","abortController","AbortController","orderData","fetchOrderDetails","abort","Spinner","Navigate","to","supertokens_id","orderTotal","products","reduce","total","product","price","autoPlay","loop","muted","src","type","_isPaid","email","_id","map","_PRODUCT_CATEGORIES$f","label","PRODUCT_CATEGORIES","find","value","category","image","images","alt","name","formatPrice","PaymentStatus"],"sourceRoot":""}