{"version":3,"file":"static/js/281.183d77f7.chunk.js","mappings":"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","sources":["components/ProductUploadForm.tsx","components/StripeAccountForm.tsx","pages/SellerDashboard.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Button } from '../components/ui/button';\nimport { useDropzone } from 'react-dropzone';\nimport Session from 'supertokens-auth-react/recipe/session';\n\nconst ProductUploadForm: React.FC = () => {\n  const [product, setProduct] = useState({\n    name: '',\n    description: '',\n    price: '',\n    category: 'clothing-item',\n    size: '',\n    ticketLink: '',\n    images: [] as File[],\n  });\n\n  const [error, setError] = useState<string | null>(null);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    if (name === 'price') {\n      const parsedPrice = parseFloat(value);\n      if (!isNaN(parsedPrice) || value === '') {\n        setProduct((prev) => ({ ...prev, [name]: value }));\n      }\n    } else {\n      setProduct((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleDrop = async (acceptedFiles: File[]) => {\n    const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp', 'image/svg+xml'];\n    const newImages: File[] = [];\n\n    for (const file of acceptedFiles) {\n      if (!validImageTypes.includes(file.type)) {\n        window.alert('You must have uploaded an unsupported image type. HEIC files make our site slow :(. Try JPG, JPEG, PNG, or even GIF! Happy selling!');\n        return;\n      }\n      newImages.push(file);\n    }\n\n    setProduct((prev) => ({ ...prev, images: [...prev.images, ...newImages] }));\n  };\n\n  const removeImage = (index: number) => {\n    setProduct((prev) => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index),\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate fields\n    if (!product.name || !product.description || product.price as unknown as number <= 0 || !product.category) {\n        window.alert('please fill in all fields correctly.');\n        return;\n    }\n\n    if (product.category === 'clothing-item' && !product.size) {\n        window.alert('size is required for clothing items.');\n        return;\n    }\n\n    if (product.category === 'event-ticket' && !product.ticketLink) {\n        window.alert('ticket link is required for event tickets.');\n        return;\n    }\n    if (isNaN(product.price as unknown as number)) {\n      window.alert('price must be a valid number.');\n      return;\n    }\n\n    setError(null);\n\n    const formData = new FormData();\n    formData.append('name', product.name);\n    formData.append('description', product.description);\n    formData.append('price', product.price.toString());\n    formData.append('category', product.category);\n    formData.append('size', product.size);\n    formData.append('ticketLink', product.ticketLink);\n\n    product.images.forEach((file) => {\n      formData.append('images', file);\n    });\n\n    console.log('Submitting product:', {\n        name: product.name,\n        description: product.description,\n        price: product.price,\n        category: product.category,\n        size: product.size,\n        ticketLink: product.ticketLink,\n        images: product.images.map(file => file.name),\n    });\n    const accessToken = await Session.getAccessToken();\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/products`, formData, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      console.log('Upload response:', response);\n      if (response.status === 201) {\n        window.location.reload();\n      } else {\n        console.error('Unexpected response:', response);\n      }\n    } catch (error) {\n      console.error('Error uploading product:', error);\n      if (axios.isAxiosError(error)) {\n        console.error('Response data:', error.response?.data);\n        console.error('Response status:', error.response?.status);\n      }\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({ \n    onDrop: handleDrop,\n    accept: { 'image/jpeg': ['.jpeg'], 'image/png': ['.png'], 'image/jpg': ['.jpg'], 'image/gif': ['.gif'], 'image/webp': ['.webp'], 'image/svg+xml': ['.svg'] },\n  });\n\n  return (\n    <div className='p-4'>\n      <h1 className='text-xl font-bold mb-4'>Upload Product</h1>\n      {error && <div className=\"text-red-500\">{error}</div>}\n      <form onSubmit={handleSubmit} className='space-y-4'>\n        <div>\n          <label className='block text-sm font-medium'>Product Name</label>\n          <input\n            type='text'\n            name='name'\n            value={product.name}\n            onChange={handleChange}\n            required\n            className='mt-1 block w-full border border-gray-300 rounded-md p-2'\n          />\n        </div>\n\n        <div>\n          <label className='block text-sm font-medium'>Description</label>\n          <textarea\n            name='description'\n            value={product.description}\n            onChange={handleChange}\n            placeholder='How would you sell this to a recruiter at a career fair? ;)'\n            className='mt-1 block w-full border border-gray-300 rounded-md p-2'\n          />\n        </div>\n\n        <div>\n          <label className='block text-sm font-medium'>Price</label>\n          <input\n            type='number'\n            name='price'\n            value={product.price}\n            onChange={handleChange}\n            required\n            className='mt-1 block w-full border border-gray-300 rounded-md p-2'\n          />\n        </div>\n\n        <div>\n          <label className='block text-sm font-medium'>Category</label>\n          <select\n            name='category'\n            value={product.category}\n            onChange={handleChange}\n            className='mt-1 block w-full border border-gray-300 rounded-md p-2'\n          >\n            <option value='clothing-item'>Clothing Item</option>\n            <option value='accessories'>Accessories</option>\n            <option value='dorm-item'>Dorm Item</option>\n            <option value='shoes'>Shoes</option>\n            <option value='event-ticket'>Event Ticket</option>\n            <option value='other'>Other</option>\n            <option value='lease'>Lease</option>\n          </select>\n        </div>\n\n        {/* Conditionally render size input for clothing items */}\n        {product.category === 'clothing-item' && (\n          <div>\n            <label className='block text-sm font-medium'>Size</label>\n            <input\n              type='text'\n              name='size'\n              value={product.size}\n              onChange={handleChange}\n              className='mt-1 block w-full border border-gray-300 rounded-md p-2'\n              required\n            />\n          </div>\n        )}\n\n        {/* Conditionally render ticket link input for event tickets */}\n        {product.category === 'event-ticket' && (\n          <div>\n            <label className='block text-sm font-medium'>Ticket Link</label>\n            <input\n              type='text'\n              name='ticketLink'\n              value={product.ticketLink}\n              onChange={handleChange}\n              className='mt-1 block w-full border border-gray-300 rounded-md p-2'\n              required\n            />\n          </div>\n        )}\n\n        <div {...getRootProps()} className='border border-dashed border-gray-300 rounded-md p-4 cursor-pointer'>\n          <input {...getInputProps()} />\n          <p>Drag & drop some files here, or click to select files</p>\n        </div>\n\n        <div className='mt-2'>\n          {product.images.map((file, index) => (\n            <div key={index} className='flex justify-between items-center mt-2'>\n              <img src={URL.createObjectURL(file)} alt={`Uploaded Image ${index + 1}`} className='w-16 h-16 object-cover rounded-md' />\n              <button type=\"button\" onClick={() => removeImage(index)} className='text-red-500'>X</button>\n            </div>\n          ))}\n        </div>\n\n        <Button variant=\"bigpurple\" type=\"submit\">\n          Upload product\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ProductUploadForm;","import React, { useState } from \"react\";\nimport { Button } from \"./ui/button\";\nimport { FetchUser } from \"utils/fetchUser\";\nimport axios from \"axios\";\n\nexport default function ConnectForm() {\n  const [accountCreatePending, setAccountCreatePending] = useState(false);\n  const [accountLinkCreatePending, setAccountLinkCreatePending] = useState(false);\n  const [error, setError] = useState(false);\n  const [connectedAccountId, setConnectedAccountId] = useState();\n  const { user, loading, error: userError } = FetchUser();\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        {!connectedAccountId && (\n          <>\n            <h2>Want to start selling on Agora?</h2>\n          </>\n        )}\n        {connectedAccountId && (\n          <>\n            <h2>Add your information to start accepting money and selling your products</h2>\n            <h2>This should only take around 5 minutes.</h2>\n          </>\n        )}\n        {!accountCreatePending && !connectedAccountId && (\n          <Button variant=\"bigpurple\" onClick={async () => {\n              setAccountCreatePending(true);\n              setError(false);\n              try {\n                  const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/account`, {\n                      method: \"POST\",\n                      headers: {\n                          \"Content-Type\": \"application/json\",\n                      },\n                      body: JSON.stringify({ userId: user._id }),\n                  });\n\n                  if (response.status !== 200) {\n                      throw new Error(response.data.error || 'Failed to create account');\n                  }\n\n                  const { account } = response.data;\n\n                  if (account) {\n                      setConnectedAccountId(account);\n                      \n                      // Update user's Stripe ID in the backend\n                      await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/update_user_stripe_id`, {\n                          userId: user._id,\n                          stripeId: account,\n                      });\n                  }\n              } catch (error) {\n                  console.error('Error creating account:', error);\n                  setError(true);\n              } finally {\n                  setAccountCreatePending(false);\n              }\n          }}\n          >\n            Enter your details to start receiving payments.\n          </Button>\n        )}\n        {connectedAccountId && !accountLinkCreatePending && (\n          <Button variant=\"bigpurple\" onClick={async () => {\n              setAccountLinkCreatePending(true);\n              setError(false);\n              axios.post(`${process.env.REACT_APP_API_BASE_URL}/account_link`, {\n                account: connectedAccountId, // Directly pass the account ID\n              })\n                .then((response) => {\n                  setAccountLinkCreatePending(false);\n\n                  const { url, error } = response.data;\n                  if (url) {\n                    window.location.href = url;\n                  }\n\n                  if (error) {\n                    setError(true);\n                  }\n                })\n                .catch((error) => {\n                  console.error('Error creating account link:', error);\n                  setError(true); // Update your error state\n                });\n            }}\n          >\n            Add information\n          </Button>\n        )}\n        {error && <p className=\"text-sm text-red-500\">Something went wrong!</p>}\n        {(connectedAccountId || accountCreatePending || accountLinkCreatePending) && (\n          <div className=\"dev-callout\">\n            {/* {connectedAccountId && <p>Your connected account ID is: <code className=\"bold\">{connectedAccountId}</code></p>} */}\n            {accountCreatePending && <p className=\"text-sm\">Creating a connected account...</p>}\n            {accountLinkCreatePending && <p className=\"text-sm\">Creating a new Account Link...</p>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { FetchUser } from '../utils/fetchUser';\nimport { IProduct } from '../schema/Product';\nimport ProductUploadForm from '../components/ProductUploadForm';\nimport { Button } from '../components/ui/button';\nimport ConnectForm from '../components/StripeAccountForm';\nimport { IOrder } from 'schema/Order';\nimport Session from 'supertokens-auth-react/recipe/session';\n\nconst SellerDashboard = () => {\n  const [isFormVisible, setFormVisible] = useState(false);\n  const [products, setProducts] = useState<IProduct[]>([]);\n  const { user, loading, error: fetchUserError } = FetchUser();\n  const userId = user?.supertokens_id;\n  const [error, setError] = useState<string | null>(null);\n\n  const toggleFormVisibility = () => {\n    setFormVisible((prev) => !prev);\n  };\n\n  const fetchProducts = async () => {\n    if (!userId) {\n      setError(\"User ID is not available.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/productslisted/${userId}`);\n      setProducts(response.data);\n    } catch (error: any) {\n      setError(error.response ? error.response.data : 'Error fetching products');\n      console.error('Error fetching products:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (!loading && user) {\n      fetchProducts();\n    }\n  }, [loading, user]);\n\n  // Memoize the ordered products check\n  const orderedProducts = useMemo(() => {\n    return products.reduce((acc, product) => {\n      acc[product._id as string] = product.approvedForSale === 'sold';\n      return acc;\n    }, {} as Record<string, boolean>);\n  }, [products]);\n\n  const markOrderAsDelivered = async (productId: string) => {\n    const confirmDelivery = window.confirm(\n        \"Are you sure you want to mark this item as delivered? If the item is not delivered to the buyer's delivery location that you were sent by email, you could lose your seller status.\"\n    );\n\n    if (!confirmDelivery) {\n        return; // Exit if the user cancels\n    }\n\n    try {\n        // Fetch the order that contains the product ID\n        const accessToken = await Session.getAccessToken();\n        const orderResponse = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/order-by-product/${productId}`, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}` // Include the auth token\n            }\n        });\n        const order = orderResponse.data;\n        console.log(order);\n\n        if (!order) {\n            console.error('Order not found for product ID:', productId);\n            return; // Handle the case where the order is not found\n        }\n\n        // Now mark the found order as delivered\n        const response = await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/deliverorder/${order._id}`, {}, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}` // Include the auth token\n            }\n        });\n        \n        // Update the product state to reflect that it has been delivered\n        setProducts((prevProducts) =>\n            prevProducts.map((product) =>\n                product._id === productId ? { ...product, approvedForSale: 'delivered' } as IProduct : product\n            )\n        );\n\n        if (response.status === 200) {\n            console.log('Order marked as delivered:', order._id);\n            // Optionally refresh the product list or state\n        }\n        window.location.reload();\n    } catch (error: any) {\n        setError(error.response ? error.response.data : 'Error marking product as delivered');\n        console.error('Error handling delivery:', error);\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      {user && user.stripe_account_id == null && (\n          <div className=\"mt-8\">\n            <ConnectForm />\n          </div>\n      )}\n      <div className=\"container mx-auto p-8 bg-gray-50 rounded-lg shadow-lg\">\n        <h1 className=\"text-4xl font-extrabold text-gray-800 mb-6\">Seller Dashboard</h1>\n        <div className=\"mb-6\">\n          {user && user.stripe_account_id && ( // Check if stripe_account_id is populated\n            <Button \n              onClick={toggleFormVisibility} \n              variant=\"bigpurple\" \n              className=\"transition duration-300 ease-in-out transform hover:scale-105 focus:ring-4 focus:ring-purple-300\"\n            >\n              {isFormVisible ? 'Cancel' : 'Add product'}\n            </Button>\n          )}\n        </div>\n        <div>\n          {/* alert sellers that stripe takes a fee of 3% that will come out of their price, so it is suggested that they price their items accordingly */}\n          <div className=\"bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4\" role=\"alert\">\n            <p className=\"font-bold\">Heads up!</p>\n            <p>Stripe takes a fee of 3% (plus 30 cents) that will come out of your price, so it is suggested that you price your items accordingly. Happy Selling!</p>\n          </div>\n        </div>\n        {isFormVisible && user && user.stripe_account_id && ( // Ensure form is only shown if stripe_account_id is populated\n          <div className=\"mb-8\">\n            <ProductUploadForm />\n          </div>\n        )}\n\n        <h2 className=\"text-2xl font-semibold text-gray-700 mb-4\">My Products</h2>\n        <div className=\"overflow-x-auto rounded-lg shadow-inner\">\n          <table className=\"min-w-full table-auto bg-white rounded-lg\">\n            <thead className=\"bg-purple-100 text-gray-700\">\n              <tr>\n                <th className=\"text-left px-6 py-4 border-b border-gray-300\">Product Name</th>\n                <th className=\"text-left px-6 py-4 border-b border-gray-300\">Status</th>\n                <th className=\"text-left px-6 py-4 border-b border-gray-300\"></th>\n                <th className=\"text-left px-6 py-4 border-b border-gray-300\">Edit</th>\n                <th className=\"text-left px-6 py-4 border-b border-gray-300\">Mark as Delivered</th>\n              </tr>\n            </thead>\n            <tbody>\n              {products.map((product: IProduct) => (\n                <tr key={product._id as string} className=\"hover:bg-purple-50 transition duration-200\">\n                  <td className=\"px-6 py-4 border-b border-gray-300\">{product.name}</td>\n                  <td className=\"px-6 py-4 border-b border-gray-300\">\n                    <span \n                      className={`inline-block px-3 py-1 text-sm font-semibold text-white rounded-md ${\n                        product.approvedForSale === 'approved' ? 'bg-[--purple]' :\n                        product.approvedForSale === 'pending' ? 'bg-[--gold]' :\n                        product.approvedForSale === 'denied' ? 'bg-red-500' :\n                        product.approvedForSale === 'sold' ? 'bg-gray-500' : 'bg-gray-300'\n                      }`}\n                    >\n                      {product.approvedForSale!.charAt(0).toUpperCase() + product.approvedForSale!.slice(1)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 border-b border-gray-300\">\n                    <img \n                      src={product.images[0].image} \n                      alt={product.name} \n                      className=\"w-16 h-16 object-cover rounded-md shadow-sm\"\n                    />\n                  </td>\n                  <td className=\"px-6 py-4 border-b border-gray-300\">\n                    <a \n                      href={`/edit-product/${product._id}`} \n                      className={`text-[--gold] font-bold hover:underline ${orderedProducts[product._id as string] ? 'opacity-50 cursor-not-allowed' : ''}`}\n                      onClick={e => {\n                        if (orderedProducts[product._id as string]) {\n                          e.preventDefault(); // Prevent navigation if the product is sold or delivered\n                        }\n                      }}\n                    >\n                      Edit\n                    </a>\n                  </td>\n                  <td className=\"px-6 py-4 border-b border-gray-300\">\n                    {orderedProducts[product._id as string] && (\n                      <Button variant=\"bigpurple\" onClick={() => markOrderAsDelivered(product._id as string)}>Mark as Delivered</Button>\n                    )}\n                    {product.approvedForSale === 'delivered' && (\n                      <span className=\"text-green-500\">Delivered</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SellerDashboard;"],"names":["ProductUploadForm","product","setProduct","useState","name","description","price","category","size","ticketLink","images","error","setError","handleChange","e","value","target","parsedPrice","parseFloat","isNaN","prev","getRootProps","getInputProps","useDropzone","onDrop","async","validImageTypes","newImages","file","acceptedFiles","includes","type","window","alert","push","accept","_jsxs","className","children","_jsx","onSubmit","preventDefault","formData","FormData","append","toString","forEach","console","log","map","accessToken","Session","response","axios","post","headers","Authorization","status","location","reload","_error$response","_error$response2","isAxiosError","data","onChange","required","placeholder","index","src","URL","createObjectURL","alt","onClick","filter","_","i","removeImage","Button","variant","ConnectForm","accountCreatePending","setAccountCreatePending","accountLinkCreatePending","setAccountLinkCreatePending","connectedAccountId","setConnectedAccountId","user","loading","userError","FetchUser","_Fragment","method","body","JSON","stringify","userId","_id","Error","account","stripeId","then","url","href","catch","SellerDashboard","isFormVisible","setFormVisible","products","setProducts","fetchUserError","supertokens_id","useEffect","get","fetchProducts","orderedProducts","useMemo","reduce","acc","approvedForSale","stripe_account_id","toggleFormVisibility","role","charAt","toUpperCase","slice","image","confirm","order","productId","put","prevProducts","markOrderAsDelivered"],"sourceRoot":""}