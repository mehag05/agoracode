{"version":3,"file":"static/js/158.6fce8ce5.chunk.js","mappings":"gOASA,MAwFA,EAxFuBA,KACnB,MAAM,KAAEC,EAAI,MAAEC,IAAUC,EAAAA,EAAAA,MACjBC,EAAQC,IAAaC,EAAAA,EAAAA,UAAmB,KACxCC,EAASC,IAAcF,EAAAA,EAAAA,WAAkB,GAC1CG,GAAWC,EAAAA,EAAAA,OACX,UAAEC,IAAcC,EAAAA,EAAAA,KAsCtB,OApCAC,EAAAA,EAAAA,YAAU,KAIiB,SAHH,IAAIC,gBAAgBL,EAASM,QACdC,IAAI,UAGnCL,GACJ,GACD,CAACF,EAAUE,KAEdE,EAAAA,EAAAA,YAAU,KACN,MAAMI,EAAkB,IAAIC,gBAoB5B,MAnBoBC,WAChB,GAAIlB,EACA,IAEI,MACMmB,SADiBC,EAAAA,EAAML,IAAI,sCAAsDf,EAAKqB,mBAChEC,KAG5BlB,EAAUe,EACd,CAAE,MAAOlB,GACLsB,QAAQtB,MAAM,yBAA0BA,EAC5C,CAAC,QACGM,GAAW,EACf,CACJ,EAGJiB,GAEO,KACHR,EAAgBS,OAAO,CAC1B,GACF,CAACzB,IAGAM,GAAgBoB,EAAAA,EAAAA,KAAA,OAAAC,UAAKD,EAAAA,EAAAA,KAACE,EAAAA,EAAO,MAC7B3B,GAAc4B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,CAAK,UAAQ1B,KAC1BD,GAGD0B,EAAAA,EAAAA,KAAA,QAAMI,UAAU,yBAAwBH,UACpCE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4HAA2HH,SAAA,EACtID,EAAAA,EAAAA,KAAA,MAAII,UAAU,8DAA6DH,SAAC,iBAG5ED,EAAAA,EAAAA,KAAA,KAAGI,UAAU,6BAA4BH,SAAC,sIACvB,IAAlBxB,EAAO4B,QACJL,EAAAA,EAAAA,KAAA,KAAGI,UAAU,6BAA4BH,SAAC,4BAE1CxB,EAAO6B,KAAKC,IACR,MAAMC,EAAUD,EAAME,SAAS,GAC/B,OACIN,EAAAA,EAAAA,MAAA,OAA+BC,UAAU,qCAAoCH,SAAA,EACzEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBH,SAAA,CAAC,KAC/BD,EAAAA,EAAAA,KAAA,OAAKU,IAAKF,EAAQG,MAAOC,IAAKJ,EAAQK,KAAMT,UAAU,2CAA2C,KACjGD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeH,SAAA,CAAC,KAC3BD,EAAAA,EAAAA,KAAA,MAAII,UAAU,oCAAmCH,SAAEO,EAAQK,QAC3DV,EAAAA,EAAAA,MAAA,KAAGC,UAAU,6BAA4BH,SAAA,CAAC,WAASM,EAAMO,iBAGjEd,EAAAA,EAAAA,KAAA,MAAII,UAAU,gCAA+BH,UACzCD,EAAAA,EAAAA,KAAA,MAAsCI,UAAU,4BAA2BH,UACvED,EAAAA,EAAAA,KAAA,QAAMI,UAAU,gBAAeH,UAAEc,EAAAA,EAAAA,GAAYP,EAAQQ,UADhDR,EAAQS,cAIrBd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BH,SAAA,EACtCD,EAAAA,EAAAA,KAAA,QAAMI,UAAU,4BAA2BH,SAAC,YAC5CD,EAAAA,EAAAA,KAAA,QAAMI,UAAU,4BAA2BH,UACtCc,EAAAA,EAAAA,GAAYR,EAAMW,YAAc,YAhBnCX,EAAMY,IAmBV,UAlCZnB,EAAAA,EAAAA,KAACoB,EAAAA,GAAQ,CAACC,GAAG,gBAuCpB,C","sources":["pages/MyOrders.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, Navigate, useLocation } from 'react-router-dom';\nimport { FetchUser } from '../utils/fetchUser';\nimport axios from 'axios';\nimport { IOrder } from '../schema/Order';\nimport { formatPrice } from '../lib/utils';\nimport { useCart } from '../hooks/useCart';\nimport Spinner from 'components/Spinner';\n\nconst UserOrdersPage = () => {\n    const { user, error } = FetchUser(); // Fetch user details\n    const [orders, setOrders] = useState<IOrder[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const location = useLocation();\n    const { clearCart } = useCart();\n\n    useEffect(() => {\n        const queryParams = new URLSearchParams(location.search);\n        const clearCartParam = queryParams.get('clear');\n\n        if (clearCartParam === 'true') {\n            clearCart();\n        }\n    }, [location, clearCart]);\n\n    useEffect(() => {\n        const abortController = new AbortController(); // Create an AbortController instance\n        const fetchOrders = async () => {\n            if (user) {\n                try {\n                    // Step 1: Fetch all orders for the user\n                    const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/myorders/${user.supertokens_id}`);\n                    const ordersData = response.data;\n\n                    // Set the orders state directly since the product details are included in the order\n                    setOrders(ordersData);\n                } catch (error) {\n                    console.error('Error fetching orders:', error);\n                } finally {\n                    setLoading(false);\n                }\n            }\n        };\n\n        fetchOrders();\n\n        return () => {\n            abortController.abort(); // Cleanup function to abort the request\n        };\n    }, [user]);\n\n    // Rendering orders\n    if (loading) return <div><Spinner/></div>;\n    if (error) return <div>Error: {error}</div>;\n    if (!user) return <Navigate to=\"/auth/signin\" />; // Redirect to sign-in if user is not authenticated\n\n    return (\n        <main className='relative lg:min-h-full'>\n            <div className='mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:grid lg:max-w-7xl lg:grid-cols-1 lg:gap-x-8 lg:px-8 lg:py-32 xl:gap-x-24'>\n                <h1 className='text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl'>\n                    Your Orders\n                </h1>\n                <p className='mt-4 text-lg text-gray-700'>Here you can track the status of your orders and see the products you have bought. Try refreshing if your order is not coming up.</p>\n                {orders.length === 0 ? (\n                    <p className='mt-4 text-lg text-gray-700'>You have no orders yet.</p>\n                ) : (\n                    orders.map((order) => {\n                        const product = order.products[0]; // Access the first product directly from the order\n                        return (\n                            <div key={order._id as string} className='mt-8 border-t border-gray-200 pt-6'>\n                                <div className='flex items-center'> {/* Change to items-center for vertical alignment */}\n                                    <img src={product.image} alt={product.name} className='w-20 h-20 object-cover rounded-lg mr-4' /> {/* Add rounded corners */}\n                                    <div className='flex flex-col'> {/* Wrap text in a div for better alignment */}\n                                        <h2 className='text-lg font-medium text-gray-900'>{product.name}</h2>\n                                        <p className='mt-2 text-sm text-gray-600'>Status: {order.status}</p>\n                                    </div>\n                                </div>\n                                <ul className='mt-4 divide-y divide-gray-200'>\n                                    <li key={product.productId as string} className='flex justify-between py-4'>\n                                        <span className='text-gray-800'>{formatPrice(product.price)}</span>\n                                    </li>\n                                </ul>\n                                <div className='mt-4 flex justify-between'>\n                                    <span className='font-medium text-gray-900'>Total:</span>\n                                    <span className='font-medium text-gray-900'>\n                                        {formatPrice(order.total_price / 100)} \n                                    </span>\n                                </div>\n                            </div>\n                        );\n                    })\n                )}\n            </div>\n        </main>\n    );\n};\n\nexport default UserOrdersPage;"],"names":["UserOrdersPage","user","error","FetchUser","orders","setOrders","useState","loading","setLoading","location","useLocation","clearCart","useCart","useEffect","URLSearchParams","search","get","abortController","AbortController","async","ordersData","axios","supertokens_id","data","console","fetchOrders","abort","_jsx","children","Spinner","_jsxs","className","length","map","order","product","products","src","image","alt","name","status","formatPrice","price","productId","total_price","_id","Navigate","to"],"sourceRoot":""}